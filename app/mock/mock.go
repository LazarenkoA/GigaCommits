// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIGiga is a mock of IGiga interface.
type MockIGiga struct {
	ctrl     *gomock.Controller
	recorder *MockIGigaMockRecorder
}

// MockIGigaMockRecorder is the mock recorder for MockIGiga.
type MockIGigaMockRecorder struct {
	mock *MockIGiga
}

// NewMockIGiga creates a new mock instance.
func NewMockIGiga(ctrl *gomock.Controller) *MockIGiga {
	mock := &MockIGiga{ctrl: ctrl}
	mock.recorder = &MockIGigaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGiga) EXPECT() *MockIGigaMockRecorder {
	return m.recorder
}

// GetCommitMsg mocks base method.
func (m *MockIGiga) GetCommitMsg(diff, locale string, maxLength int, debug bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMsg", diff, locale, maxLength, debug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitMsg indicates an expected call of GetCommitMsg.
func (mr *MockIGigaMockRecorder) GetCommitMsg(diff, locale, maxLength, debug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMsg", reflect.TypeOf((*MockIGiga)(nil).GetCommitMsg), diff, locale, maxLength, debug)
}

// MockIGit is a mock of IGit interface.
type MockIGit struct {
	ctrl     *gomock.Controller
	recorder *MockIGitMockRecorder
}

// MockIGitMockRecorder is the mock recorder for MockIGit.
type MockIGitMockRecorder struct {
	mock *MockIGit
}

// NewMockIGit creates a new mock instance.
func NewMockIGit(ctrl *gomock.Controller) *MockIGit {
	mock := &MockIGit{ctrl: ctrl}
	mock.recorder = &MockIGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGit) EXPECT() *MockIGitMockRecorder {
	return m.recorder
}

// GitDiff mocks base method.
func (m *MockIGit) GitDiff(debug bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitDiff", debug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitDiff indicates an expected call of GitDiff.
func (mr *MockIGitMockRecorder) GitDiff(debug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitDiff", reflect.TypeOf((*MockIGit)(nil).GitDiff), debug)
}
